<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.springframework.org/schema/beans"       
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:p="http://www.springframework.org/schema/p"       
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Activates various annotations to be detected in bean classes: Spring's @Required and @Autowired,
        as well as JSR 250's @PostConstruct, @PreDestroy and @Resource (if available) 
        and JPA's @PersistenceContext and @PersistenceUnit (if available).
    -->
    <context:annotation-config />

    <!-- Scan the classpath for annotated components that will be auto-registered as Spring beans.
        By default, Spring-provided stereotypes: @Component, @Repository, @Service, and @Controller will be detected.
    -->
    <context:component-scan base-package="com.company.restservice" annotation-config="true" />

    <!-- <context:property-placeholder location="classpath:application.properties" />  -->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.sqlite.JDBC" />
        <property name="url" value="jdbc:sqlite:./src/main/resources/mydb-test.db" />
        <property name="username" value="root" />
        <property name="password" value="root" />
    </bean>

    <!-- PERSISTENCE SUPPORT (JPA , Hibernate ,IBatis etc) -->
    <bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.SQLiteDialect</prop>
                <prop key="hibernate.query.substitutions">true 'T', false 'F'</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">true</prop>
                <prop key="hibernate.c3p0.minPoolSize">18</prop>
                <prop key="hibernate.c3p0.maxPoolSize">72</prop>
                <prop key="hibernate.c3p0.timeout">900</prop>
                <prop key="hibernate.c3p0.max_statement">500</prop>
                <prop key="hibernate.c3p0.testConnectionOnCheckout">false</prop>
                <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <!-- <prop key="hibernate.cache.region_prefix"></prop> -->
            </props>
        </property>
        <property name="ignoreResourceNotFound" value="false" />
    </bean>

    <!-- Define a bean named 'sessionFactory' that configures a test SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
        p:dataSource-ref="dataSource" p:hibernateProperties-ref="hibernateProperties">
        <property name="packagesToScan" value="com/company/**/model" />
    </bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"
        p:sessionFactory-ref="sessionFactory" />

    <tx:annotation-driven transaction-manager="transactionManager" />
</beans>